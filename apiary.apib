FORMAT: 1A
HOST: https://aik-yar.ru/api/v1

# Академия Игоря Крутого

При авторизации пользователю отдается токен сессии, идентифицирующий его в системе.

# Коды ошибок

- 200 – Успешный запрос.
- 201 – Успешное создание ресурса.
- 204 – Ресурс пуст. Возвращён пустой ответ.
- 400 – В запросе синтаксическая ошибка. Не может быть обработан.
- 401 – Пользователь не авторизован.
- 404 – Страница не найдена. Некорректный путь запроса.
- 405 – Указанный метод нельзя применить к текущему ресурсу.
- 501 – Сервер не поддерживает возможностей, необходимых для обработки запроса. Типичный ответ для случаев, когда сервер не понимает указанный в запросе метод.


# Общий Header

+ Headers

            Location: http://api.acme.com/message
    

# Group Пользователи

Все действия с аккаунтами.

## Positions [/positions/{id}]

+ Parameters
    + id: 123 (number, required)
        id позиции сотрудника

+ Attributes (object)
    + id: 1 (number, required)
        id позиции сотрудника
    + name: Руководитель (string, required)
        Название позиции:
         - 1 - педагог
         - 2 - администратор
         - 3 - руководитель


## Accesses [/accesses/{id}]

+ Parameters
    + id: 123 (number, required)
        id уровня доступа

+ Attributes (object)
    + id: 1 (number, required)
        id уровня доступа
    + name: Руководитель (string, required)
        Название уровня доступа пользователя:
         - 1 - ученик
         - 2 - родитель
         - 3 - педагог
         - 4 - администратор
         - 5 - руководитель


## User [/users/{id}]

+ Parameters
    + id: 123 (number, required)
        id пользователя

+ Attributes (object)
    + id: 123 (number, required)
        id пользователя
    + accessID: 3 (number, required)
        id уровня доступа
    + login: vasya2004 (string, required) 
        Уникальный логин пользователя для индентификации в системе.
    + password: qwerty (string, required) 
        Пароль пользователя. Возможно, нужно хранить в зашифрованном виде.
    + name: Вася (string, required) 
        Имя человека.
    + surname: Пупкин (string, required) 
        Фамилия человека.
    + middle_name: Михайлович (string) 
        Отчество человека.
    + icon_url: ik.ru/media/images/imageID (string, required)
        Ссылка на иконку пользователя.
    + positionID: 1 (string) 
        id должности. Указывается в случае, если пользователь – сотрудник.
    + amount_of_babies: 2 (number) 
        Количество детей. Указывается в случае, если пользователь – родитель.
    + babiesIDs: 123, 122 (array)
        Указавается, если пользователь - родитель.
        Массив с id-ишниками детей, которых родитель привязал к своему аккаунту.
    + parentID: 55 (number) 
        Указавается, если пользователь - ребенок. id его родителя.
    + cash: 500 (number)
        Виден только родителю.
        Cчет в рублях. Выставляется родителю. 
        0 - ничего не нужно оплачивать.
        XXX р. - нужно оплатить такую сумму.

    

### Удаление существующего аккаунта [DELETE]

Удалять аккаунт могут пользователи с уровнем доступа 3,4. 
Для удаления требуется логин удаляемого пользователя.

+ Request (application/json)

+ Response 200
    
+ Response 204

+ Response 400
    
        "Некорректный запрос"

+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такой пользователь не найден"
  
+ Response 405

        "Метод не разрешен"
  
+ Response 501

    

### Изменение существующего аккаунта человека [PUT]

+ Request (application/json)
    + Attributes (object)
        + accessID: 3 (number)
            id уровня доступа
        + login: vasya2004 (string) 
            Уникальный логин пользователя для индентификации в системе.
        + password: qwerty (string, required) 
            Пароль пользователя. Возможно, нужно хранить в зашифрованном виде.
        + name: Вася (string) 
            Имя человека.
        + surname: Пупкин (string) 
            Фамилия человека.
        + middle_name: Михайлович (string) 
            Отчество человека.
        + icon: 1d11222d112d1d1 (string)
            Base64 кодировка изображения.
        + positionID: 1 (string) 
            id должности. Указывается в случае, если пользователь – сотрудник.
        + amount_of_babies: 2 (number) 
            Количество детей. Указывается в случае, если пользователь – родитель.
        + babiesIDs: 123, 122 (array)
            Указавается, если пользователь - родитель.
            Массив с id-ишниками детей, которых родитель привязал к своему аккаунту.
        + parentID: 55 (number) 
            Указавается, если пользователь - ребенок. id его родителя.
        + cash: 500 (number)
            Виден только родителю.
            Cчет в рублях. Выставляется родителю. 
            0 - ничего не нужно оплачивать.
            XXX р. - нужно оплатить такую сумму.
    
+ Response 201

        "Данные обновлены успешно"
    
+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такой пользователь не найден"
    
+ Response 405

        "Метод не разрешен"

+ Response 501



### Вся информация об аккаунте [GET]

С помощью этого метода можно получить все детели о пользователе.

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (User)
        + id: 123 (number, required)
            id пользователя
        + accessID: 3 (number, required)
            id уровня доступа
        + login: vasya2004 (string, required) 
            Уникальный логин пользователя для индентификации в системе.
        + name: Вася (string, required) 
            Имя человека.
        + surname: Пупкин (string, required) 
            Фамилия человека.
        + middle_name: Михайлович (string) 
            Отчество человека.
        + icon_url: ik.ru/media/images/imageID (string, required)
            Ссылка на иконку пользователя.
        + positionID: 1 (string) 
            id должности. Указывается в случае, если пользователь – сотрудник.
        + amount_of_babies: 2 (number) 
            Количество детей. Указывается в случае, если пользователь – родитель.
        + babiesIDs: 123, 122 (array)
            Указавается, если пользователь - родитель.
            Массив с id-ишниками детей, которых родитель привязал к своему аккаунту.
        + parentID: 55 (number) 
            Указавается, если пользователь - ребенок. id его родителя.
        + cash: 500 (number)
            Виден только родителю.
            Cчет в рублях. Выставляется родителю. 
            0 - ничего не нужно оплачивать.
            XXX р. - нужно оплатить такую сумму.
    
+ Response 204
    
+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
    
+ Response 404

        "Такой пользователь не найден"

+ Response 405

        "Метод не разрешен"

+ Response 501


## Действия с объектами пользователей [/users/]


### Создание нового аккаунта [POST]

Создавать аккаунт могут пользователи с уровнем доступа 3,4. 
Для создания нового аккаунта требуется JSON-объект.

+ Request (application/json)
    + Attributes (object)
        + accessID: 3 (number, required)
            id уровня доступа
        + login: vasya2004 (string, required) 
            Уникальный логин пользователя для индентификации в системе.
        + password: qwerty (string, required) 
            Пароль пользователя. Возможно, нужно хранить в зашифрованном виде.
        + name: Вася (string, required) 
            Имя человека.
        + surname: Пупкин (string, required) 
            Фамилия человека.
        + middle_name: Михайлович (string) 
            Отчество человека.
        + icon: 1d11222d112d1d1 (string)
            Base64 кодировка изображения.
        + positionID: 1 (string) 
            id должности. Указывается в случае, если пользователь – сотрудник.
        + cash: 500 (number)
            Виден только родителю.
            Cчет в рублях. Выставляется родителю. 
            0 - ничего не нужно оплачивать.
            XXX р. - нужно оплатить такую сумму.
    
+ Response 201

        "Данные созданы успешно"
    
+ Response 400
    
        "Некорректный запрос"

+ Response 401

        "Для данного действия необходима авторизация"

+ Response 404

        "Некорректный путь запроса"

+ Response 405

        "Метод не разрешен"

+ Response 501


## Пользователи конкретного уровня [/users/access/{id}]

+ Parameters
    + id: 123 (number, required)
        id позиции сотрудника

### Получение списка пользователя n-ого уровня [GET]

Получает список всех пользователей нужного уровня доступа 
(ученик[1], родитель[2], преподаватель[3], администратор[4], руководитель[5]).

+ Request (application/json)
 
+ Response 200 (application/json)
    + Attributes
        + persons (array)
            - (User)

+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Пользователи данного уровня не найдены"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


## Group [/users/groups/{groupID}] 

+ Parameters
    + groupID: groupID12 (string, required)
        groupID -  индентификатор группы

+ Attributes (object)
    + groupID: groupID12 (string, required)
        groupID -  индентификатор группы
    + name: группа 12 (string, required) 
        Название группы.
    + students: id20, id34, id30, id40 (array) 
        Учащиеся, состоящие в этой группе.

   


### Добавление человечков в существующую группу [PUT]

Изменять события могут пользователи с уровнем доступа 2,3,4. 

+ Request (application/json)
    + Attributes
        + new_students: id21, id41 (array)
            Массив id студентов, добавляемых в группу.

+ Response 201

        "Данные обновлены успешно"

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Некорректный путь запроса"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


### Удаление существующей группы [DELETE]

Удалять группы могут пользователи с уровнем доступа 2,3,4. 
Для удаления требуется название удаляемой группы.

+ Request (application/json)
    + Attributes
        +  name: группа 2 (string, required) 
            Название группы, которую требуется удалить.

+ Response 200

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Некорректный путь запроса"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


## Действия с объектами групп [/users/groups/]

### Создание новой группы [POST]

Создавать группы могут пользователи с уровнем доступа 2,3,4.

+ Request (application/json)
    + Attributes (Group)

+ Response 201
    
        "Данные созданы успешно"

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Некорректный путь запроса"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


### Получение списка студентов группы [GET]

Получает список всех пользователей определенной группы.

+ Request (application/json)
    + Attributes
        + name: група 3 (string, required)
            Название группы.
    
+ Response 200 (application/json)
    + Attributes
        + students (array)
            - (User)


+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"

+ Response 404

        "Такой группы не найдено"

+ Response 405

        "Метод не разрешен"

+ Response 501



# Group Расписание

Подгрузка новых сведений для пользователей.

При нажатии на занятие - переход в раздел домашних заданий.

Реализация фильтра событий: только индивидуальные 
занятия/групповые занятия/концерты. 

Тип событий: 
- индивидуальное занятие
- групповое занятие
- концерт

## Event [/timetable/events/{eventID}]

+ Parameters
    + eventID: eventID123 (string, required)
        eventID – индентификатор события

+ Attributes (object)
    + eventID: eventID123 (string, required)
        eventID – индентификатор события
    + type: 0 (number, required)
        Тип события:
         - 0 - индивидуальное занятие
         - 1 - групповое занятие
         - 2 - концерт
    + name: вокал (string, required) 
        Название события.
    + date: 03.09.2018 (string, required) 
        Дата события.
    + time: 13:00 (string, required) 
        Время события.
    + length: 1.5 (number) 
        Продолжительность занятия. Указывается в часах.
    + location: аудитория 2 (string) 
        Аудитория / местоположение события.
    + teacher: Ирина Олеговна (string)
        Преподаватель.
    + students: id123, id400, id500 (array)
        Студенты, участвующие в событии.
    + homework: hworkID40 (string)
        Индентификотор домашнего задания.
        

### Получение события [GET]

+ Request (application/json)
    + Attributes
        + person: id400 (string, required)
            id запрашивающего человека, для которого выводится событие,
            связанные с ним.
    
+ Response 200 (application/json)
    + Attributes (Event)

+ Response 204

+ Response 400
    
        "Событие не найдено"
    
+ Response 401

        "Для данного действия необходима авторизация"

+ Response 404

        "Такой группы не найдено"

+ Response 405

        "Метод не разрешен"

+ Response 501


### Изменение существующего события [PUT]

Изменять события могут пользователи с уровнем доступа 2,3,4. 

+ Request (application/json)
    + Attributes (Event)

+ Response 201

        "Данные обновлены успешно"

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такой пользователь не найден"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


### Удаление существующего события [DELETE]

Удалять события могут пользователи с уровнем доступа 2,3,4. 
Для удаления требуется тип события, дата и время события.

+ Request (application/json)
    + Attributes
        + type: 0 (number, required)
            Тип события:
             - 0 - индивидуальное занятие
             - 1 - групповое занятие
             - 2 - концерт
        + date: 03.09.2018 (string, required) 
            Дата события.
        + time: 13:00 (string, required) 
            Время события.

+ Response 200

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такой пользователь не найден"
    
+ Response 405

        "Метод не разрешен"

+ Response 501

  
## Действия с объектами событий [/timetable/events/]


### Создание нового события [POST]

Создавать событие могут пользователи с уровнем доступа 2,3,4. 
Для создания нового аккаунта требуется JSON-объект.

+ Request (application/json)
    + Attributes (Event)

+ Response 201

        "Данные созданы успешно"

+ Response 400
    
        "Некорректный запрос"

+ Response 401

        "Для данного действия необходима авторизация"

+ Response 404

        "Некорректный путь запроса"

+ Response 405

        "Метод не разрешен"

+ Response 501


### Получение списка событий определенного вида [GET]

Получает события типа индивидульное задание[0], групповое[1], концерт[3].
+ Request (application/json)
    + Attributes
        + type: 0 (number, required)
            Тип события:
             - 0 - индивидуальное занятие
             - 1 - групповое занятие
             - 2 - концерт

+ Response 200 (application/json)
    + Attributes
        + events (array)
            - (Event)

+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "События не найдены"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


## Day [/timetable/days/{day}]

+ Parameters
    + day: 05.03.2018 (string, required)
        Дата в формате ДЕНЬ-МЕСЯЦ-ГОД.

+ Attributes (object)
    + day: 05.03.2018 (string, required)
        Дата в формате ДЕНЬ-МЕСЯЦ-ГОД.
    + events: eventID30, eventID31, eventID32 (array)
        Список событий, прикрепленных к данному дню.


### Получение событий за день [GET]

+ Request (application/json)
    + Attributes
        + person: id400 (string, required)
            id запрашивающего человека, для которого выводятся события,
            связанные с ним.
+ Response 200
    + Attributes
        + events (array)
            - (Event)

+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такой день в календаре не найден"
    
+ Response 405

        "Метод не разрешен"

+ Response 501


## Week [/timetable/weeks/{week}]

+ Parameters
    + week: 2 (number, required)
        Порядковый номер недели в году, начиная с 1ой недели января.

+ Attributes (object)
    + week: 2 (number, required)
        Порядковый номер недели в году, начиная с 1ой недели января.
        week_events: Список событий для каждого дня в неделе.
        У каждого дня есть ссылка на события, которые относятся к нему.
    + week_events (array)
        - (Day)

### Получение событий за неделю [GET]

+ Request (application/json)
    + Attributes
        + person: id400 (string, required)
            id запрашивающего человека, для которого выводятся события,
            связанные с ним.
        + from: 20.03.2018 (string, required)
        + to: 27.03.2018 (string, required)
            Недельный промежуток времени в формате ДЕНЬ-МЕСЯЦ-ГОД.

+ Response 200
    + Attributes (Week)

+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такая неделя в календаре не найдена"
    
+ Response 405

        "Метод не разрешен"

+ Response 501



## Month [/timetable/months/{month}]

+ Parameters
    + month: 2 (number, required)
        Порядковый номер месяца в году, начиная с января.

+ Attributes (object)
    + month: 2 (number, required)
        Порядковый номер месяца в году, начиная с января.
        month_events: Список событий для каждой недели в месяце.
        У каждого месяца есть ссылка на дни, в которых ссылка на события, 
        которые относятся к этому дню.
    + month_events (array)
        - (Week)
        


### Получение событий за неделю [GET]

+ Request (application/json)
    + Attributes
        + person: id400 (string, required)
            id запрашивающего человека, для которого выводятся события,
            связанные с ним.
        + from: 20.03.2018 (string, required)
        + to: 27.03.2018 (string, required)
            Недельный промежуток времени в формате ДЕНЬ-МЕСЯЦ-ГОД.

+ Response 200
    + Attributes (Week)

+ Response 204

+ Response 400
    
        "Некорректный запрос"
    
+ Response 401

        "Для данного действия необходима авторизация"
  
+ Response 404

        "Такой месяц в календаре не найден"
    
+ Response 405

        "Метод не разрешен"

+ Response 501



# Group Учебный процесс

У каждого пользователя, занятия, группы, песни из репертуара есть стой id.
Админы и руководитель могут выставлять счет определенному родителю: 0 - ничего 
платить не надо, (ХХХ руб) - такой счет родитель должен отплатить 
за своего детеныша.

## Homework [/timetable/homework/{hworkID}]

+ Parameters
    + hworkID: hworkID10 (string, required)
        hworkID – индентификатор домашнего задания

+ Attributes (object)
    + hworkID: hworkID10 (string, required)
        hworkID – индентификатор домашнего задания
    + type: 0 (number, required)
        Кому предназначается:
         - 0 - одному человеку
         - 1 - группе
    + text: Прочитать страницу 23. (string) 
        Текст домашнего задания.
    + event: eventID30 (string, required) 
        eventID события, к которому прикрепляется домашнее задание.
    + teacher: Ирина Олеговна (string, required)
        Преподаватель, дающий домашнее задание.
    + students: id123, id400, id500 (array, required)
        Студенты, которым задали данное домашнее задание.
    + files: ik.ru/media/files/fileID (string)
        Файлы, прикрепляемые к домашнему заданию.
    + comment: Вася молодец. (string)
        Комментарий к домашнему заданию.
    + repertoire: reperID20 (string)
        Репертуар, прикрепленный в качестве домашнего задания.


### Получение домашнего задания [GET]

+ Request (application/json)
    + Attributes
        + person: id400 (string, required)
            id запрашивающего человека, для которого выводятся события.
        + event: eventID30 (string)
            Событие, к которому прикреплено домашнее задание.

+ Response 200 (application/json)
    + Attributes (Homework)
+ Response 404

        "Ошибка. Такое домашнее задание не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


### Изменение существующего домашнего задания [PUT]

Изменять ДЗ могут пользователи с уровнем доступа 2,3,4. 

+ Request (application/json)
    + Attributes (Homework)
+ Response 200 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Удаление существующего домашнего задания [DELETE]

Удалять группы могут пользователи с уровнем доступа 2,3,4. 
Для удаления требуется тип ДЗ(одному, группе) и событие к которому оно прикреплено.

+ Request (application/json)
    + Attributes
        + event: eventID30 (string, required) 
            eventID события, к которому прикрепляется домашнее задание.
        + type: 0 (number, required)
            Кому предназначается:
            - 0 - одному человеку
            - 1 - группе
+ Response 200
+ Response 404

        "Ошибка. Такой пользователь не найден."
        
+ Response 405

        "Ошибка. Метод не разрешен."

## Действия с домашним заданием [/timetable/homework/]

### Добавление домашнего задания [POST]

Создавать ДЗ могут пользователи с уровнем доступа 2,3,4. 
Для создания нового ДЗ требуется JSON-объект.

+ Request (application/json)
    + Attributes (Homework)
+ Response 201 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Получение домашнего задания за период [GET]

Получает список всех ДЗ за указанный период, которое относится к запрашиваемому
человеку. Если это родитель, то он получает ДЗ для своих детей.

+ Request (application/json)
    + Attributes
        + person: id3 (string, required)
            Человек, запрашивающий ДЗ.
        + from: 20.03.2018 (string, required)
        + to: 23.03.2018 (string, required)
    
+ Response 200 (application/json)
    + Attributes
        + homework (array)
            - (Homework)

+ Response 404

        "Ошибка. Домашнего задания за данный период не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


## Repertoire [/timetable/repertoire/{reperID}]

Репертуар - это песни со словами или без слов, а также с текстом или без.

+ Parameters
    + reperID: reperID12 (string, required)
        reperID – индентификатор репертуара

+ Attributes (object)
    + reperID: reperID12 (string, required)
        reperID – индентификатор репертуара
    + name: Toxicity (string, required)
        Название песни. (Названия повторяться не могут).
    + name: System of A Down (string)
        Исполнитель песни.
    + plus: ik.ru/media/repertoire/reperID20/plus (string)
        Файл репертуара - песня со словами и музыкой.
    + minus: ik.ru/media/repertoire/reperID20/minus (string)
        Файл репертуара - песня только с музыкой.
    + text_file: ik.ru/media/repertoire/reperID20/text (string)
        Файл репертуара, содержащий текст песни.
    + text: Доброе утро, страна! (string) 
        Текст песни. Дополнительный способ текста.
    + minus: ik.ru/media/repertoire/reperID20/icon (string)
        Обложка песни.  


### Получение репертуара - конкретной песни [GET]

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes (Repertoire)
+ Response 404

        "Ошибка. Такого репертуара не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


### Изменение существующего репертуара [PUT]

Изменять ДЗ могут пользователи с уровнем доступа 2,3,4. 

+ Request (application/json)
    + Attributes (Repertoire)
+ Response 200 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Удаление существующего репертуара [DELETE]

Удалять группы могут пользователи с уровнем доступа 2,3,4. 
Для удаления требуется название песни.

+ Request (application/json)
    + Attributes
        + name: Toxicity (string, required)
            Название песни.
+ Response 200
+ Response 404

        "Ошибка. Такой репертуар не найден."
        
+ Response 405

        "Ошибка. Метод не разрешен."


## Действия с репертуаром [/timetable/repertoire/]

### Добавление нового репертуара [POST]

Добалять репертуар могут пользователи с уровнем доступа 3,4. 
Для добавления нового требуется JSON-объект.

+ Request (application/json)
    + Attributes (Repertoire)
+ Response 201 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Получение всего репертуара [GET]

Получает список всех репертуаров.

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes
        + repertoire (array)
            - (Repertoire)

+ Response 404

        "Ошибка. Репертуара не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."



# Group Лента новостей

## News [/news/{newsID}]

+ Parameters
    + newsID: newsID134 (string, required)
        newsID – индентификатор новости

+ Attributes (object)
    + newsID: newsID134 (string, required)
        newsID – индентификатор новости
    + head: Мы запустились! (string, required)
        Заголовок новости.
    + text: Доброе утро, страна! Приходите. (string) 
        Текст новости.
    + files: ik.ru/media/news/newsID134/fileID (string)
        Файлы прикрепляемые к новости.


### Получение конкретной новости [GET]

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes (News)
+ Response 404

        "Ошибка. Такой новости не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."



### Изменение существующей новости [PUT]

Изменять нуовость могут пользователи с уровнем доступа 3,4. 

+ Request (application/json)
    + Attributes (News)
+ Response 200 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Удаление существующей новости [DELETE]

Удалять новости могут пользователи с уровнем доступа 3,4. 
Для удаления требуется заголовок новости.

+ Request (application/json)
    + Attributes
        + name: Мы запустились! (string, required)
            Заголовок новости.
+ Response 200
+ Response 404

        "Ошибка. Такая новость не найдена."
        
+ Response 405

        "Ошибка. Метод не разрешен."


## Действия с новостями [/news/]

### Добавление новой новости [POST]

Добалять новость могут пользователи с уровнем доступа 3,4. 
Для добавления нового требуется JSON-объект.

+ Request (application/json)
    + Attributes (News)
+ Response 201 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Получение всех новостей [GET]

Получает список всех новостей.

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes
        + news (array)
            - (News)

+ Response 404

        "Ошибка. Новостей не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."





# Group Таск-менеджер

## Task [/tasks/{taskID}]

Таска - конкретное задание для администратора/учителя. 

+ Parameters
    + taskID: taskID13 (string, required)
        taskID – индентификатор таски

+ Attributes (object)
    + taskID: taskID13 (string, required)
        taskID – индентификатор таски
    + doer: Петр Васильевич (string, required)
        Исполнитель таски.
    + doer_id: id46 (string, required)
        id исполнителя таски.
    + master: Ирина Олеговна (string, required)
        От кого адресована таска.
    + master_id: id 40 (string, required)
        id задающего таску.
    + head: Подписать договор (string, required)
        Заголовок таски.
    + text: Всякие подробности... (string) 
        Текст таски.
    + from: 20.03.2018 (string, required)
    + to: 25.03.2018 (string, required)
        Период, на который выдается задание.
    + done: false (boolean)
        Отметка о выполнении, ее ставит исполнитель.
    + comment: Подписал, все окей. (string)
        Комментарий пишет исполнитель, как только выполнил задание и
        поставил отметку done.
    + files: ik.ru/media/tasks/taskID3 (string)
        Файлы прикрепляемые к таске.

### Получение конкретной таски [GET]

Создавать таски(задания) могут пользователи с уровнем доступа 3,4.
Руководитель[4] может создавать таски для педагогов[2] и админов[3].
Администратор[4] может создавать таски для педагогов[2].
[x] - уровень доступа x.

+ Request (application/json)
+ Response 200 (application/json)
    + Attributes (Task)
+ Response 404

        "Ошибка. Такой таски не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


### Удаление существующей таски [DELETE]

Удалять тасик могут пользователи с уровнем 
доступа 3,4 (только созданные ими таски).
Для удаления требуется заголовок новости и кем, кому назначался.

+ Request (application/json)
    + Attributes
        + name: Подписать договор (string, required)
            Заголовок таски.
        + doer_id: id46 (string, required)
            id исполнителя таски.
        + master_id: id 40 (string, required)
            id задающего таску.
+ Response 200
+ Response 404

        "Ошибка. Такое задание не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."



## Действия с тасками [/tasks/]

### Добавление новой таски [POST]

Создавать таски(задания) могут пользователи с уровнем доступа 3,4.
Руководитель[4] может создавать таски для педагогов[2] и админов[3].
Администратор[4] может создавать таски для педагогов[2].
[x] - уровень доступа x.

+ Request (application/json)
    + Attributes (Task)
+ Response 201 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Получение всех заданий(входящих, исходящих) за период [GET]

Получает список всех заданий для запрашивающего человека,
как входящие, так и исходящие. Если период не указан - то выводятся
такси за все время.

+ Request (application/json)
    + Attributes
        + from: 20.03.2018 (string, required)
        + to: 30.03.2018 (string, required)
            Период по которому выдаются таски.
        + type: 0 (number, required)
            Тип задания:
                - 0 - входящие таски. Если id запрашивающего
                совпадает с исполнителем таски, то это входящая таска
                - 1 - исходящие таски. Если id запрашивающего
                совпадает с назначителем таски, то это исходящая таска

+ Response 200 (application/json)
    + Attributes
        + tasks (array)
            - (Task)

+ Response 404

        "Ошибка. Заданий не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


# Group Журнал посещаемости

Существует 2 журнала посещаемости:
- учеников
- педагогов

Статусы в журнале учеников:
- «Б» : больничный
- «-» : прогул
- " ": присутствие

Статусы в журнале педагогов:
- «Б» : больничный
- «-» : прогул
- время прихода, время ухода


## Score [/journal/{scoreID}]

Таска - конкретное задание для администратора/учителя.

+ Parameters
    + scoreID: scoreID20 (string, required)
        scoreID – индентификатор отметки о посещении

+ Attributes (object)
    + scoreID: scoreID20 (string, required)
        scoreID – индентификатор отметки о посещении
    + person: id20 (string, required)
        id человека, для которого заводится отметка о его посещении.
    + access: 3 (number, required)
        Уровень доступа пользователя:
         - 0 - ученик
         - 1 - родитель
         - 2 - педагог
         - 3 - администратор
         - 4 - руководитель
    + type: 0 (number, required)
        Тип журнала:
        - 0 - журнал посещения учеников, если person id - ученик.
        - 1 - журнал посещения преподавателей, если person id - преподаватель.
    + date: 20.03.2018 (string, required)
        Дата, к которой ставится отметка о посещении.
    + log: 0 (number, required)
        Отметка пристутсвия / отсутствия на конкретный день.
        - 0 - присутствует
        - 1 - прогул
        - 2 - больничный
    + time_log_from: 10:00 (string) 
        Указывается только для педагогов(уровень доступа 2).
        Время прихода педагога на работу.
    + time_log_to: 19:00 (string) 
        Указывается только для педагогов(уровень доступа 2).
        Время ухода педагога с работы.


### Удаление существующей отметки о посещении [DELETE]

Удалять отметку о посещении ученика[0] может преподаватель[2], администратор[3],
руководитель[4].
Удалять отметку о посещении преподавателя[2] может администратор[3],
руководитель[4].
[x] - уровень доступа пользователя x.
Для удаления требуется день и id пользователя для которого ставилась отметка.

+ Request (application/json)
    + Attributes
        + person: id20 (string, required)
            id человека, для которого заводится отметка о его посещении.
        + date: 20.03.2018 (string, required)
            Дата, к которой ставится отметка о посещении.
+ Response 200
+ Response 404

        "Ошибка. Такое задание не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


### Получение конкретной отметки о посещении [GET]

+ Request (application/json)
    + Attributes
        + type: 0 (number, required)
            Тип журнала:
            - 0 - журнал посещения учеников, если person id - ученик.
            - 1 - журнал посещения преподавателей, если person id - преподаватель.
+ Response 200 (application/json)
    + Attributes (Score)
+ Response 404

        "Ошибка. Такой таски не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."


## Действия с отметками о посещении [/journal/]

### Добавление новой отметки о посещении [POST]

Добавлять отметку о посещении ученика[0] может преподаватель[2], администратор[3],
руководитель[4].
Добавлять отметку о посещении преподавателя[2] может администратор[3],
руководитель[4].
[x] - уровень доступа пользователя x.

+ Request (application/json)
    + Attributes (Score)
+ Response 201 (application/json)
+ Response 405

        "Ошибка. Метод не разрешен."


### Получение всех отметок о посещении за период для учеников/преподов [GET]

Получает список всех отметок о посещении для запрашивающего человека.
Если период не указан - то выводятся отметки за все время.

+ Request (application/json)
    + Attributes
        + from: 20.03.2018 (string, required)
        + to: 30.03.2018 (string, required)
            Период по которому выдаются таски.
        + person: id20 (string, required)
            id человека, для которого вываодятся отметки о его посещении.
        + type: 0 (number, required)
            Тип журнала:
            - 0 - журнал посещения учеников, если person id - ученик.
            - 1 - журнал посещения преподавателей, если person id - преподаватель.

+ Response 200 (application/json)
    + Attributes
        + score (array)
            - (Score)

+ Response 404

        "Ошибка. Заданий не найдено."
        
+ Response 405

        "Ошибка. Метод не разрешен."